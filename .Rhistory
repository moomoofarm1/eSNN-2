source('~/.active-rstudio-document')
L
M
source('~/.active-rstudio-document')
lappend <- function(lst, obj) {
lst[[length(lst)+1]] <- obj
return(lst)
}
a<-c(45,30,45,10)
d1<-c(16,1)
x1<-c(3,5,9,5)
C2<-NULL
d2<-NULL
C3<-NULL
d3<-NULL
C1<-rbind(as.numeric(x1),c(1,1,1,1))
n<-1
M<-list()
L<-list()
i=1
d1<-c(16,i)
d3<-lappend(d3,1)
for(j in n:length(a)){
ti<-c(rep.int(0, length(a)) )
ti[j]<-1
Y<-C3
if(is.null(Y)){
Y=rbind(Y,as.numeric(ti))
}else{
Y=lappend(Y,as.numeric(ti))
}
v<- tryCatch(v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE), error=function(e){
return( 1)
})
L<-lappend(L,Y)
v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE)
M<-lappend(M,v)
}
L
M
C3<-L[[1]]
L<-list()
n<-n+1
i=2
d1<-c(16,i)
d3<-lappend(d3,1)
d1
d3
for(j in n:length(a)){
ti<-c(rep.int(0, length(a)) )
ti[j]<-1
Y<-C3
if(is.null(Y)){
Y=rbind(Y,as.numeric(ti))
}else{
Y=lappend(Y,as.numeric(ti))
}
v<- tryCatch(v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE), error=function(e){
return( 1)
})
L<-lappend(L,Y)
v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE)
M<-lappend(M,v)
}
L
C3
d1
M
n
ti<-c(rep.int(0, length(a)) )
ti[j]<-1
Y<-C3
if(is.null(Y)){
Y=rbind(Y,as.numeric(ti))
}else{
Y=lappend(Y,as.numeric(ti))
}
Y
Y
y[[1]]
Y[[1]]
source('~/.active-rstudio-document')
L
M
source('~/.active-rstudio-document')
L
M
source('~/.active-rstudio-document')
L
M
L
M
M[-1]
M[-9]
M[-9]
lappend <- function(lst, obj) {
lst[[length(lst)+1]] <- obj
return(lst)
}
a<-c(45,30,45,10)
d1<-c(16,1)
x1<-c(3,5,9,5)
C2<-NULL
d2<-NULL
C3<-NULL
d3<-NULL
C1<-rbind(as.numeric(x1),c(1,1,1,1))
n<-1
M<-list()
L<-list()
P<-list()
d1<-c(16,1)
d3<-lappend(d3,1)
for(j in n:length(a)){
ti<-c(rep.int(0, length(a)) )
ti[j]<-1
Y<-C3
if(is.null(Y)){
Y=rbind(Y,as.numeric(ti))
}else{
Y=rbind(Y,as.numeric(ti))
}
v<- tryCatch(v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE), error=function(e){
return( 1)
})
L<-lappend(L,Y)
v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE)
M<-lappend(M,v)
}
C3<-L[[1]]
L<-L[-1]
P<-L
L<-list()
n<-n+1
P
lappend <- function(lst, obj) {
lst[[length(lst)+1]] <- obj
return(lst)
}
a<-c(45,30,45,10)
d1<-c(16,1)
x1<-c(3,5,9,5)
C2<-NULL
d2<-NULL
C3<-NULL
d3<-NULL
C1<-rbind(as.numeric(x1),c(1,1,1,1))
n<-1
M<-list()
L<-list()
P<-list()
d1<-c(16,1)
d3<-lappend(d3,1)
for(j in n:length(a)){
ti<-c(rep.int(0, length(a)) )
ti[j]<-1
Y<-C3
if(is.null(Y)){
Y=rbind(Y,as.numeric(ti))
}else{
Y=rbind(Y,as.numeric(ti))
}
v<- tryCatch(v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE), error=function(e){
return( 1)
})
L<-lappend(L,Y)
v<-simplex(a, A1 =C1, b1 = d1, A2 = C2, b2 =d2,A3=Y,b3=d3, maxi = TRUE)
M<-lappend(M,v)
}
C3<-L[[1]]
L<-L[-1]
P<-L
L<-list()
n<-n+1
L
P
C3
rbind(C3,C3)
q<-rbind(C3,C3)
q
nrow(q)
library(XML)
url <- 'http://www.sportsdata.gr/football/national/season2015_16/game.asp?game=1'
tables <- readHTMLTable(url)
tables
setwd("F:/Thesis/REPO")
debugSource('F:/Thesis/REPO/demo.R', echo=TRUE)
setwd("F:/Thesis/REPO")
source('F:/Thesis/REPO/ESNN.R', echo=TRUE)
source('F:/Thesis/REPO/ESNN.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
suppressWarnings(source('F:/Thesis/REPO/demo.R'))
for(i in 1:10){ suppressWarnings(source('F:/Thesis/REPO/demo.R')) }
?microbenchmark
source('F:/Thesis/REPO/demo.R')
train <- read.csv('data/santander/train.csv')
k <- train[1:20,]
k
View(k)
data_train <- train
max(k$imp_ent_var16_ult1)
max(k$imp_op_var39_comer_ult1)
k$imp_op_var39_comer_ult1 <- k$imp_op_var39_comer_ult1/max(k$imp_op_var39_comer_ult1)
for(i in 1:length(k[,1])){
cat(i)
}
for(i in 1:length(k[,1])){
cat(i)
}
for(i in 1:length(k[,1])){
cat(i)
}
k[,1]
k[1,]
length(k[1,])
for(i in 1:length(k[1,])){
cat(i)
}
for(i in 1:length(k[1,])){
k[,i] <- k[,i]/max(k[,i])
}
head(data_train)
k$TARGET
k<-train[1:20,]
k$TARGET
k[,371]
for(i in 2:length(k[1,])-1){
k[,i] <- k[,i]/max(k[,i])
}
k<-train[1:20,]
k$TARGET
test <- read.csv('data/santander/test.csv')
data_test <- test
encoder <- SpikeEncoding$new(nbFields = 370, beta = 3, iMin = -1000, iMax= 1000)
source('main.R')
encoder <- SpikeEncoding$new(nbFields = 370, beta = 3, iMin = -1000, iMax= 1000)
esnnSAN <- ESNN$new(encoder=enc, m=0.9, c=0.7, s=0.6)
esnnSAN <- ESNN$new(encoder=encoder, m=0.9, c=0.7, s=0.6)
esnnSAN$train(train)
source('F:/Thesis/REPO/demo.R')
doTheTest('i')
source('F:/Thesis/REPO/demo.R')
resultsTable<-c()
resultsTable$a <- 2
resultsTable$b <- c(1,2)
resultsTable<-c()
resultsTable[[1]]<-c(1,2,'a')
View(resultsTable)
resultsTable<-c()
resultsTable<-c(resultsTable,c(1,2,'a'))
resultsTable<-data.frame()
data.frame(1,2,'a')
a <- rbind(resultsTable,data.frame(1,2,'a'))
View(a)
source('F:/Thesis/REPO/demo.R')
res
names(res) <- c('label','classified','result')
head(res)
source('F:/Thesis/REPO/demo.R')
res
install.packages('caret')
head(res)
head(res$label)
library(caret)
confusionMatrix(res$classified, res$label)
install.packages('e1071', dependencies=TRUE)
confusionMatrix(res$classified, res$label)
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
res
source('F:/Thesis/REPO/demo.R')
debugSource('F:/Thesis/REPO/demo.R')
irisTestResults
irisTestResults$confusionMatrix
cat(irisTestResults$confusionMatrix)
cat(paste(irisTestResults$confusionMatrix))
irisTestResults$confusionMatrix
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
res$results
head(res$results)
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
res$confusionMatrix
source('F:/Thesis/REPO/demo.R')
res$confusionMatrix
source('F:/Thesis/REPO/demo.R')
s$confusionMatrix
i$confusionMatrix
source('F:/Thesis/REPO/demo.R')
i$confusionMatrix
s$confusionMatrix
source('F:/Thesis/REPO/demo.R')
irisTrainSet
irisData <- read.csv(file="data/iris.data", header=FALSE, sep=" ")
baseIrisData <- as.data.frame(c(irisData[,1:4], irisData[5]))
shuffledIrisData <- baseIrisData[sample(nrow(baseIrisData)),]
irisTrainSet <- shuffledIrisData[1:100,]
irisTestSet <- shuffledIrisData[101:150,]
enc <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = 0, iMax= 8)
esnnIris <- ESNN$new(encoder = enc, m=0.9, c=0.7, s=0.6)
esnnIris$train(irisTrainSet)
debugSource('F:/Thesis/REPO/ESNN.R')
esnnIris$train(irisTrainSet)
debugSource('F:/Thesis/REPO/ESNN.R')
debugSource('F:/Thesis/REPO/ESNN.R')
debugSource('F:/Thesis/REPO/ESNN.R')
a <-c(1,2,3)
b <-c(1,1,3)
confusionMatrix(a,b)
source('F:/Thesis/REPO/demo.R')
encoder <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = -1, iMax= 1)
irisData <- read.csv(file="data/iris.data", header=FALSE, sep=" ")
baseIrisData <- as.data.frame(c(irisData[,1:4], irisData[5]))
shuffledIrisData <- baseIrisData[sample(nrow(baseIrisData)),]
irisTrainSet <- shuffledIrisData[1:100,]
irisTestSet <- shuffledIrisData[101:150,]
enc <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = 0, iMax= 8)
esnnIris <- ESNN$new(encoder = enc, m=0.9, c=0.7, s=0.6)
esnnIris$train(irisTrainSet)
irisTestResults <- esnnIris$test(irisTestSet)
encoder <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = -1, iMax= 1)
source('F:/Thesis/REPO/ESNN.R')
source('F:/Thesis/REPO/SpikeEncoding.R')
source('F:/Thesis/REPO/TrainedNeuron.R')
source('F:/Thesis/REPO/Repo.R')
encoder <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = -1, iMax= 1)
irisData <- read.csv(file="data/iris.data", header=FALSE, sep=" ")
baseIrisData <- as.data.frame(c(irisData[,1:4], irisData[5]))
shuffledIrisData <- baseIrisData[sample(nrow(baseIrisData)),]
irisTrainSet <- shuffledIrisData[1:100,]
irisTestSet <- shuffledIrisData[101:150,]
enc <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = 0, iMax= 8)
esnnIris <- ESNN$new(encoder = enc, m=0.9, c=0.7, s=0.6)
esnnIris$train(irisTrainSet)
irisTestResults <- esnnIris$test(irisTestSet)
irisTestResults
cc <- irisTestResults$confusionMatrix
cc
?
a
typeof(cc)
names(cc)
cc$table
zz <- cc$table
typeof(zz)
zz[1]
zz[]
zz[2]
dim(zz)
confTable <- irisTestResults$confusionMatrix$table
dim(confTable)
dim(confTable)[[1]]
dim(confTable)[[1]]<3
source('F:/Thesis/REPO/TrainedNeuron.R')
source('F:/Thesis/REPO/SpikeEncoding.R')
source('F:/Thesis/REPO/ESNN.R')
source('F:/Thesis/REPO/Repo.R')
data <- read.csv(file="data/spiral.data", header=FALSE, sep=" ")
baseData <- as.data.frame(c(data[,1:6], data[21]))
shuffledData <- baseData[sample(nrow(baseData)),]
trainSet <- shuffledData[1:300,]
testSet <- shuffledData[301:400,]
enc <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = 0, iMax= 8)
esnn <- ESNN$new(encoder = encoder, m=0.9, c=0.7, s=0.6)
encoder <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = -1, iMax= 1)
esnn <- ESNN$new(encoder = encoder, m=0.9, c=0.7, s=0.6)
esnn$train(trainSet)
testResults <- esnn$test(testSet)
testResults
dim(testResults$confusionMatrix$table)
testResults$confusionMatrix$table[[1]]
testResults$confusionMatrix$table[[2]]
testResults$confusionMatrix$table[,1]
testResults$confusionMatrix$table[2,]
testResults$confusionMatrix$table[,2]
testResults$confusionMatrix$table
b<- testResults$confusionMatrix$table[1,2]
d<- testResults$confusionMatrix$table[2,2]
b
d
precision <- d / (b+d)
precision
source('F:/Thesis/REPO/demo.R')
s$confusionMatrix
source('F:/Thesis/REPO/demo.R')
s$confusionMatrix
source('F:/Thesis/REPO/ESNN.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/ESNN.R')
source('F:/Thesis/REPO/demo.R')
s
<- read.csv(file="data/spiral.data", header=FALSE, sep=" ")
baseData <- as.data.frame(c(data[,1:6], data[21]))
shuffledData <- baseData[sample(nrow(baseData)),]
trainSet <- shuffledData[1:300,]
testSet <- shuffledData[301:400,]
esnn <- ESNN$new(encoder = encoder, m=0.9, c=0.7, s=0.6)
esnn$train(trainSet)
testResults <- esnn$test(testSet)
data <- read.csv(file="data/spiral.data", header=FALSE, sep=" ")
baseData <- as.data.frame(c(data[,1:6], data[21]))
shuffledData <- baseData[sample(nrow(baseData)),]
trainSet <- shuffledData[1:300,]
testSet <- shuffledData[301:400,]
esnn <- ESNN$new(encoder = encoder, m=0.9, c=0.7, s=0.6)
esnn$train(trainSet)
testResults <- esnn$test(testSet)
encoder <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = -1, iMax= 1)
data <- read.csv(file="data/spiral.data", header=FALSE, sep=" ")
baseData <- as.data.frame(c(data[,1:6], data[21]))
shuffledData <- baseData[sample(nrow(baseData)),]
trainSet <- shuffledData[1:300,]
testSet <- shuffledData[301:400,]
esnn <- ESNN$new(encoder = encoder, m=0.9, c=0.7, s=0.6)
esnn$train(trainSet)
testResults <- esnn$test(testSet)
testResults
source('F:/Thesis/REPO/ESNN.R')
data <- read.csv(file="data/spiral.data", header=FALSE, sep=" ")
baseData <- as.data.frame(c(data[,1:6], data[21]))
shuffledData <- baseData[sample(nrow(baseData)),]
trainSet <- shuffledData[1:300,]
testSet <- shuffledData[301:400,]
esnn <- ESNN$new(encoder = encoder, m=0.9, c=0.7, s=0.6)
esnn$train(trainSet)
testResults <- esnn$test(testSet)
testResults
testResults
testResults$stats$overall
testResults$stats$overall$Accuracy
testResults$stats$overall[[1]]
source('F:/Thesis/REPO/ESNN.R')
data <- read.csv(file="data/spiral.data", header=FALSE, sep=" ")
baseData <- as.data.frame(c(data[,1:6], data[21]))
shuffledData <- baseData[sample(nrow(baseData)),]
trainSet <- shuffledData[1:300,]
testSet <- shuffledData[301:400,]
esnn <- ESNN$new(encoder = encoder, m=0.9, c=0.7, s=0.6)
esnn$train(trainSet)
testResults <- esnn$test(testSet)
testResults
irisData <- read.csv(file="data/iris.data", header=FALSE, sep=" ")
baseIrisData <- as.data.frame(c(irisData[,1:4], irisData[5]))
shuffledIrisData <- baseIrisData[sample(nrow(baseIrisData)),]
irisTrainSet <- shuffledIrisData[1:100,]
irisTestSet <- shuffledIrisData[101:150,]
enc <- SpikeEncoding$new(nbFields = 20, beta = 1.5, iMin = 0, iMax= 8)
esnnIris <- ESNN$new(encoder = enc, m=0.9, c=0.7, s=0.6)
esnnIris$train(irisTrainSet)
irisTestResults <- esnnIris$test(irisTestSet)
irisTestResults$precision
irisTestResults$accuracy
source('F:/Thesis/REPO/ESNN.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
source('F:/Thesis/REPO/demo.R')
s$stats
s$accuracy
s$p
s$precision
s$a
s$stats$table[2,1]
s$stats$table
s$stats$table[2,2]
s$stats$table[2,1]
c <- s$stats$table[2,1]
d <- s$stats$table[2,2]
d / (c+d)
setwd("F:/kaggle/titanic")
source('F:/kaggle/titanic/esnn.R')
source('F:/kaggle/titanic/esnn.R')
source('F:/kaggle/titanic/esnn.R')
data <- read.csv(file="data/train.csv", header=TRUE, sep=" ")
data <- read.csv(file="data/train_norm.csv", header=FALSE, sep=" ")
View(data)
data <- read.csv(file="data/train_norm.csv", header=TRUE, sep=",")
View(data)
drops <- c('Name')
DF <- data
DF <- DF[ , !(names(DF) %in% drops)]
View(DF)
source('F:/kaggle/titanic/esnn.R')
source('F:/kaggle/titanic/esnn.R')
results
results <- esnn$test(test)
u <- read.csv('users030516.csv')
setwd("F:/Great Sam")
setwd("F:/Great Sam")
u <- read.csv('users030516.csv')
View(u)
head(u)
str(u)
View(u[1:2])
View(u[1:2,])
k <- data.frame(name=u$displayName, username=u$username, age=u$age,city=u$city, email=u$email,objComp=u$questsStatus.56dee3b85aa7338048f9ca9c.progression.complete, comp==u$questsStatus.56dee3b85aa7338048f9ca9c.complete )
k <- data.frame(name=u$displayName, username=u$username, age=u$age,city=u$city, email=u$email,objComp=u$questsStatus.56dee3b85aa7338048f9ca9c.progression.complete, comp=u$questsStatus.56dee3b85aa7338048f9ca9c.complete )
View(k)
write.csv(x = k, file = 'usersClean.csv')
